// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyLibrary.DAL;

#nullable disable

namespace MyLibrary.Migrations
{
    [DbContext(typeof(LibraryDb))]
    partial class LibraryDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyLibrary.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<int?>("GenreId")
                        .HasColumnType("int");

                    b.Property<bool>("Set")
                        .HasColumnType("bit");

                    b.Property<int?>("ShelfId")
                        .HasColumnType("int");

                    b.Property<int>("bookHeight")
                        .HasColumnType("int");

                    b.Property<string>("bookName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("bookWidth")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.HasIndex("GenreId");

                    b.HasIndex("ShelfId");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("MyLibrary.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("MyLibrary.Models.Shelf", b =>
                {
                    b.Property<int>("ShelfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShelfId"));

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("ShelfHeight")
                        .HasColumnType("int");

                    b.Property<int>("ShelfWidth")
                        .HasColumnType("int");

                    b.HasKey("ShelfId");

                    b.HasIndex("GenreId");

                    b.ToTable("Shelf");
                });

            modelBuilder.Entity("MyLibrary.Models.Book", b =>
                {
                    b.HasOne("MyLibrary.Models.Genre", "Genre")
                        .WithMany("books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MyLibrary.Models.Shelf", "Shelf")
                        .WithMany("Books")
                        .HasForeignKey("ShelfId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Genre");

                    b.Navigation("Shelf");
                });

            modelBuilder.Entity("MyLibrary.Models.Shelf", b =>
                {
                    b.HasOne("MyLibrary.Models.Genre", "Genre")
                        .WithMany("shelves")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("MyLibrary.Models.Genre", b =>
                {
                    b.Navigation("books");

                    b.Navigation("shelves");
                });

            modelBuilder.Entity("MyLibrary.Models.Shelf", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
